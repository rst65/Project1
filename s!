#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define MAX_STUDENTS 100
#define MAX_BUFFER 1024

struct Student {
    int ID;
    char Fname[50];
    char Lname[50];
    float score;
};

struct Student students[MAX_STUDENTS];
int numStudents = 0;

void add(int clientSocket) {
    char buffer[1024];

    if (numStudents >= MAX_STUDENTS) {
        char *message = "Database is full.\n";
        send(clientSocket, message, strlen(message), 0);
        return;
    }

    struct Student newStudent;

    char *prompt = "Enter student ID: ";
    send(clientSocket, prompt, strlen(prompt), 0);
    recv(clientSocket, buffer, 1024, 0);
    sscanf(buffer, "%d", &newStudent.ID);

    prompt = "Enter first name: ";
    send(clientSocket, prompt, strlen(prompt), 0);
    recv(clientSocket, buffer, 1024, 0);
    sscanf(buffer, "%s", newStudent.Fname);

    prompt = "Enter last name: ";
    send(clientSocket, prompt, strlen(prompt), 0);
    recv(clientSocket, buffer, 1024, 0);
    sscanf(buffer, "%s", newStudent.Lname);

    prompt = "Enter score: ";
    send(clientSocket, prompt, strlen(prompt), 0);
    recv(clientSocket, buffer, 1024, 0);
    sscanf(buffer, "%f", &newStudent.score);

    students[numStudents] = newStudent;
    numStudents++;

    FILE *file = fopen("students.txt", "a");
    if (file != NULL) {
        fprintf(file, "ID: %d, Name: %s %s, Score: %.2f\n", newStudent.ID, newStudent.Fname, newStudent.Lname, newStudent.score);
        fclose(file);
    }

    char *successMessage = "Student added successfully!\n";
    send(clientSocket, successMessage, strlen(successMessage), 0);
}

void display(int clientSocket) {
    // ... (Your existing display function here) ...
}

void display_score(int clientSocket) {
    // ... (Your existing display_score function here) ...
}

void display_all(int clientSocket) {
    // ... (Your existing display_all function here) ...
}

void delete(int clientSocket) {
    // ... (Your existing delete function here) ...
}

int main(int argc, char **argv){
    int serverSocket, newSocket;
    struct sockaddr_in serverAddr;
    struct sockaddr_storage serverStorage;
    socklen_t addr_size;

    serverSocket = socket(PF_INET, SOCK_STREAM, 0);

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(7891);
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
    memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);  

    bind(serverSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

    if(listen(serverSocket,50)==0)
        printf("Listening\n");
    else
        printf("Error\n");

    addr_size = sizeof serverStorage;
    newSocket = accept(serverSocket, (struct sockaddr *) &serverStorage, &addr_size);

    int choice;
    do {
        uint32_t network_choice;
        recv(newSocket, &network_choice, sizeof(network_choice), 0);
        choice = ntohl(network_choice);

        switch (choice) {
            case 1:
                add(newSocket);
                break;
            case 2:
                display(newSocket);
                break;
            case 3:
                display_score(newSocket);
                break;
            case 4:
                display_all(newSocket);
                break;
            case 5:
                delete(newSocket);
                break;
        }
    } while (choice != 6);

    return 0;
}
