#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>


struct Student {
    int ID;
    char Fname[50];
    char Lname[50];
    float score;};

struct Student students[MAX_STUDENTS];
int numStudents = 0;

void add(int newSocket) {
    char buffer[1024];

    if (numStudents >= MAX_STUDENTS) {
        char *message = "Database is full.\n";
        send(clientSocket, message, strlen(message), 0);
        return; }

    struct Student newStudent;

    char *prompt = "Enter student ID: ";
    send(newSocket, prompt, strlen(prompt), 0);
    recv(newSocket, buffer, 1024, 0);
    sscanf(buffer, "%d", &newStudent.ID);

    prompt = "Enter first name: ";
    send(newSocket, prompt, strlen(prompt), 0);
    recv(newSocket, buffer, 1024, 0);
    sscanf(buffer, "%s", newStudent.Fname);

    prompt = "Enter last name: ";
    send(newSocket, prompt, strlen(prompt), 0);
    recv(clientSocket, buffer, 1024, 0);
    sscanf(buffer, "%s", newStudent.Lname);

    prompt = "Enter score: ";
    send(newSocket, prompt, strlen(prompt), 0);
    recv(newSocket, buffer, 1024, 0);
    sscanf(buffer, "%f", &newStudent.score);

    students[numStudents] = newStudent;
    numStudents++;

    FILE *file = fopen("students.txt", "a");
    if (file != NULL) {
        fprintf(file, "ID: %d, Name: %s %s, Score: %.2f\n", newStudent.ID, newStudent.Fname, newStudent.Lname, newStudent.score);
        fclose(file); }

    char *successMessage = "Student added successfully!\n";
    send(newSocket, successMessage, strlen(successMessage), 0);}

int main(int argc, char **argv){
int welcomeSocket, newSocket;
char buffer[1024];
struct sockaddr_in serverAddr;
struct sockaddr_storage serverStorage;
socklen_t addr_size;
unsigned short port; 
uint32_t num;
char msg[30];
welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);
serverAddr.sin_family = AF_INET;
port = (unsigned short) atoi(argv[1]);
serverAddr.sin_port = htons(port);
serverAddr.sin_addr.s_addr = INADDR_ANY;
memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);
bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));
if(listen(welcomeSocket,5)==0)
printf("Listening\n");
else
printf("Error\n");
addr_size = sizeof serverStorage;

 while(1){
        newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);
int choice;
recv(newSocket, &num, sizeof(num), 0);
    choice = ntohl(num);  // Convert from network byte order to host byte order

    switch (choice) {
        case 1:
            // Add new student information to the database
            // You would need to implement the add function
            add(newSocket);
            break;
        // Handle other cases...
        default:
            printf("Invalid choice\n");
            break;
    }      
close(newSocket);
close(welcomeSocket);
return 0;
}

